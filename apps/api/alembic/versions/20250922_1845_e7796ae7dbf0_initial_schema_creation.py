"""Initial schema creation

Revision ID: e7796ae7dbf0
Revises: 
Create Date: 2025-09-22 18:45:55.129949

"""
from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e7796ae7dbf0'
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mitre_tactics',
    sa.Column('tactic_id', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('stix_uuid', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('tactic_id')
    )
    op.create_index(op.f('ix_mitre_tactics_stix_uuid'), 'mitre_tactics', ['stix_uuid'], unique=True)
    op.create_index(op.f('ix_mitre_tactics_tactic_id'), 'mitre_tactics', ['tactic_id'], unique=True)
    op.create_table('severities',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('level'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tenants',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('max_users', sa.Integer(), nullable=False),
    sa.Column('max_storage_gb', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug', name='uq_tenants_slug')
    )
    op.create_index(op.f('ix_tenants_slug'), 'tenants', ['slug'], unique=True)
    op.create_table('categories',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=1000), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_parent_id'), 'categories', ['parent_id'], unique=False)
    op.create_index(op.f('ix_categories_path'), 'categories', ['path'], unique=False)
    op.create_index(op.f('ix_categories_tenant_id'), 'categories', ['tenant_id'], unique=False)
    op.create_table('mitre_techniques',
    sa.Column('technique_id', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('tactic_id', sa.String(length=20), nullable=False),
    sa.Column('parent_technique_id', sa.String(length=20), nullable=True),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('stix_uuid', sa.String(length=64), nullable=True),
    sa.Column('platforms', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('data_sources', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tactic_id'], ['mitre_tactics.tactic_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('technique_id')
    )
    op.create_index(op.f('ix_mitre_techniques_parent_technique_id'), 'mitre_techniques', ['parent_technique_id'], unique=False)
    op.create_index(op.f('ix_mitre_techniques_stix_uuid'), 'mitre_techniques', ['stix_uuid'], unique=True)
    op.create_index(op.f('ix_mitre_techniques_tactic_id'), 'mitre_techniques', ['tactic_id'], unique=False)
    op.create_index(op.f('ix_mitre_techniques_technique_id'), 'mitre_techniques', ['technique_id'], unique=True)
    op.create_table('tags',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=20), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=False)
    op.create_index(op.f('ix_tags_tenant_id'), 'tags', ['tenant_id'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('mfa_secret', sa.String(length=255), nullable=True),
    sa.Column('mfa_enabled', sa.Boolean(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verification_token', sa.String(length=255), nullable=True),
    sa.Column('verification_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_users_email')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_table('actors',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('aliases', postgresql.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('actor_type', sa.String(length=50), nullable=False),
    sa.Column('attribution_confidence', sa.Float(), nullable=False),
    sa.Column('attribution_rationale', sa.Text(), nullable=True),
    sa.Column('primary_attribution', sa.String(length=255), nullable=True),
    sa.Column('sophistication_level', sa.String(length=50), nullable=False),
    sa.Column('threat_level', sa.String(length=50), nullable=False),
    sa.Column('motivations', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('origin_country', sa.String(length=3), nullable=True),
    sa.Column('target_countries', postgresql.ARRAY(sa.String(length=3)), nullable=True),
    sa.Column('target_sectors', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('suspected_attribution', sa.String(length=255), nullable=True),
    sa.Column('first_observed', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_observed', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('summary', sa.String(length=500), nullable=True),
    sa.Column('mitre_attack_id', sa.String(length=50), nullable=True),
    sa.Column('stix_uuid', sa.String(length=64), nullable=True),
    sa.Column('external_ids', sa.JSON(), nullable=True),
    sa.Column('references', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('analyst_notes', sa.Text(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=False),
    sa.Column('is_validated', sa.Boolean(), nullable=False),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('custom_attributes', sa.JSON(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_actors_actor_type'), 'actors', ['actor_type'], unique=False)
    op.create_index(op.f('ix_actors_created_by'), 'actors', ['created_by'], unique=False)
    op.create_index(op.f('ix_actors_first_observed'), 'actors', ['first_observed'], unique=False)
    op.create_index(op.f('ix_actors_last_observed'), 'actors', ['last_observed'], unique=False)
    op.create_index(op.f('ix_actors_mitre_attack_id'), 'actors', ['mitre_attack_id'], unique=False)
    op.create_index(op.f('ix_actors_name'), 'actors', ['name'], unique=False)
    op.create_index(op.f('ix_actors_origin_country'), 'actors', ['origin_country'], unique=False)
    op.create_index(op.f('ix_actors_primary_attribution'), 'actors', ['primary_attribution'], unique=False)
    op.create_index(op.f('ix_actors_status'), 'actors', ['status'], unique=False)
    op.create_index(op.f('ix_actors_stix_uuid'), 'actors', ['stix_uuid'], unique=True)
    op.create_index(op.f('ix_actors_tenant_id'), 'actors', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_actors_updated_by'), 'actors', ['updated_by'], unique=False)
    op.create_table('detections',
    sa.Column('name', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('rule_content', sa.Text(), nullable=False),
    sa.Column('rule_format', sa.String(length=50), nullable=False),
    sa.Column('severity_id', sa.UUID(), nullable=False),
    sa.Column('visibility', sa.String(length=20), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('performance_impact', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('author', sa.String(length=255), nullable=False),
    sa.Column('source_url', sa.String(length=1000), nullable=True),
    sa.Column('platforms', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('data_sources', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('false_positives', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('updated_by', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['severity_id'], ['severities.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_detections_created_by'), 'detections', ['created_by'], unique=False)
    op.create_index(op.f('ix_detections_name'), 'detections', ['name'], unique=False)
    op.create_index(op.f('ix_detections_rule_format'), 'detections', ['rule_format'], unique=False)
    op.create_index(op.f('ix_detections_severity_id'), 'detections', ['severity_id'], unique=False)
    op.create_index(op.f('ix_detections_status'), 'detections', ['status'], unique=False)
    op.create_index(op.f('ix_detections_tenant_id'), 'detections', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_detections_updated_by'), 'detections', ['updated_by'], unique=False)
    op.create_index(op.f('ix_detections_visibility'), 'detections', ['visibility'], unique=False)
    op.create_table('actor_technique_mappings',
    sa.Column('actor_id', sa.UUID(), nullable=False),
    sa.Column('technique_id', sa.String(length=20), nullable=False),
    sa.Column('confidence_level', sa.String(length=20), nullable=False),
    sa.Column('first_observed', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_observed', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['technique_id'], ['mitre_techniques.technique_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('actor_id', 'technique_id', 'id')
    )
    op.create_table('campaigns',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('aliases', postgresql.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('attribution_confidence', sa.Float(), nullable=False),
    sa.Column('objectives', postgresql.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('target_sectors', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('target_countries', postgresql.ARRAY(sa.String(length=3)), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('summary', sa.String(length=500), nullable=True),
    sa.Column('tactics_techniques', postgresql.ARRAY(sa.String(length=50)), nullable=True),
    sa.Column('external_ids', sa.JSON(), nullable=True),
    sa.Column('references', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('analyst_notes', sa.Text(), nullable=True),
    sa.Column('custom_attributes', sa.JSON(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_campaigns_actor_id'), 'campaigns', ['actor_id'], unique=False)
    op.create_index(op.f('ix_campaigns_end_date'), 'campaigns', ['end_date'], unique=False)
    op.create_index(op.f('ix_campaigns_name'), 'campaigns', ['name'], unique=False)
    op.create_index(op.f('ix_campaigns_start_date'), 'campaigns', ['start_date'], unique=False)
    op.create_index(op.f('ix_campaigns_status'), 'campaigns', ['status'], unique=False)
    op.create_index(op.f('ix_campaigns_tenant_id'), 'campaigns', ['tenant_id'], unique=False)
    op.create_table('detection_category_mappings',
    sa.Column('detection_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['detection_id'], ['detections.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('detection_id', 'category_id', 'id')
    )
    op.create_table('detection_mitre_mappings',
    sa.Column('detection_id', sa.UUID(), nullable=False),
    sa.Column('technique_id', sa.String(length=20), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['detection_id'], ['detections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['technique_id'], ['mitre_techniques.technique_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('detection_id', 'technique_id', 'id')
    )
    op.create_table('detection_tag_mappings',
    sa.Column('detection_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['detection_id'], ['detections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('detection_id', 'tag_id', 'id')
    )
    op.create_table('malware_families',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('aliases', postgresql.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('family_type', sa.String(length=50), nullable=False),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('attribution_confidence', sa.Float(), nullable=False),
    sa.Column('platforms', postgresql.ARRAY(sa.String(length=50)), nullable=True),
    sa.Column('capabilities', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('first_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('summary', sa.String(length=500), nullable=True),
    sa.Column('external_ids', sa.JSON(), nullable=True),
    sa.Column('references', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('analyst_notes', sa.Text(), nullable=True),
    sa.Column('custom_attributes', sa.JSON(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_malware_families_actor_id'), 'malware_families', ['actor_id'], unique=False)
    op.create_index(op.f('ix_malware_families_family_type'), 'malware_families', ['family_type'], unique=False)
    op.create_index(op.f('ix_malware_families_first_seen'), 'malware_families', ['first_seen'], unique=False)
    op.create_index(op.f('ix_malware_families_last_seen'), 'malware_families', ['last_seen'], unique=False)
    op.create_index(op.f('ix_malware_families_name'), 'malware_families', ['name'], unique=False)
    op.create_index(op.f('ix_malware_families_status'), 'malware_families', ['status'], unique=False)
    op.create_index(op.f('ix_malware_families_tenant_id'), 'malware_families', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_malware_families_tenant_id'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_status'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_name'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_last_seen'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_first_seen'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_family_type'), table_name='malware_families')
    op.drop_index(op.f('ix_malware_families_actor_id'), table_name='malware_families')
    op.drop_table('malware_families')
    op.drop_table('detection_tag_mappings')
    op.drop_table('detection_mitre_mappings')
    op.drop_table('detection_category_mappings')
    op.drop_index(op.f('ix_campaigns_tenant_id'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_status'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_start_date'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_name'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_end_date'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_actor_id'), table_name='campaigns')
    op.drop_table('campaigns')
    op.drop_table('actor_technique_mappings')
    op.drop_index(op.f('ix_detections_visibility'), table_name='detections')
    op.drop_index(op.f('ix_detections_updated_by'), table_name='detections')
    op.drop_index(op.f('ix_detections_tenant_id'), table_name='detections')
    op.drop_index(op.f('ix_detections_status'), table_name='detections')
    op.drop_index(op.f('ix_detections_severity_id'), table_name='detections')
    op.drop_index(op.f('ix_detections_rule_format'), table_name='detections')
    op.drop_index(op.f('ix_detections_name'), table_name='detections')
    op.drop_index(op.f('ix_detections_created_by'), table_name='detections')
    op.drop_table('detections')
    op.drop_index(op.f('ix_actors_updated_by'), table_name='actors')
    op.drop_index(op.f('ix_actors_tenant_id'), table_name='actors')
    op.drop_index(op.f('ix_actors_stix_uuid'), table_name='actors')
    op.drop_index(op.f('ix_actors_status'), table_name='actors')
    op.drop_index(op.f('ix_actors_primary_attribution'), table_name='actors')
    op.drop_index(op.f('ix_actors_origin_country'), table_name='actors')
    op.drop_index(op.f('ix_actors_name'), table_name='actors')
    op.drop_index(op.f('ix_actors_mitre_attack_id'), table_name='actors')
    op.drop_index(op.f('ix_actors_last_observed'), table_name='actors')
    op.drop_index(op.f('ix_actors_first_observed'), table_name='actors')
    op.drop_index(op.f('ix_actors_created_by'), table_name='actors')
    op.drop_index(op.f('ix_actors_actor_type'), table_name='actors')
    op.drop_table('actors')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tags_tenant_id'), table_name='tags')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_mitre_techniques_technique_id'), table_name='mitre_techniques')
    op.drop_index(op.f('ix_mitre_techniques_tactic_id'), table_name='mitre_techniques')
    op.drop_index(op.f('ix_mitre_techniques_stix_uuid'), table_name='mitre_techniques')
    op.drop_index(op.f('ix_mitre_techniques_parent_technique_id'), table_name='mitre_techniques')
    op.drop_table('mitre_techniques')
    op.drop_index(op.f('ix_categories_tenant_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_path'), table_name='categories')
    op.drop_index(op.f('ix_categories_parent_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_tenants_slug'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_table('severities')
    op.drop_index(op.f('ix_mitre_tactics_tactic_id'), table_name='mitre_tactics')
    op.drop_index(op.f('ix_mitre_tactics_stix_uuid'), table_name='mitre_tactics')
    op.drop_table('mitre_tactics')
    # ### end Alembic commands ###
